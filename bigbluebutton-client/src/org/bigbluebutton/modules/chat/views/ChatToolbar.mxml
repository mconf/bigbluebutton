<?xml version="1.0" encoding="utf-8"?>

<mx:VBox xmlns="flexlib.containers.*" 
		 initialize="init()" 
		 xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns:mate="http://mate.asfusion.com/" 
		 creationComplete="onCreationComplete()"
		 visible="{toolbarVisible}" 
		 styleName="whiteboardToolbarStyle"
		 horizontalAlign="center"
		 hideEffect="{fadeOut}" showEffect="{fadeIn}" 
		 backgroundColor="{bgColor}">
	
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import com.asfusion.mate.events.Dispatcher;

			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.modules.chat.events.ChatToolbarButtonEvent;
			import org.bigbluebutton.modules.chat.model.ChatOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable] public var chatOptions:ChatOptions;
			[Bindable] private var baseIndex:int;
			[Bindable] private var toolbarVisible:Boolean = false;
			[Bindable] private var bgColor:Number = 0xCCCCCC;

			private var mousedOver:Boolean = false;
			private var globalDispatcher:Dispatcher;
			private var _toolbarHideTimer:Timer;
			
			public function init():void{
				chatOptions = new ChatOptions();
				baseIndex = chatOptions.baseTabIndex;

				_toolbarHideTimer = new Timer(500, 1);
				_toolbarHideTimer.addEventListener(TimerEvent.TIMER, closeToolbar);
			}
			
			private function onCreationComplete():void {
				globalDispatcher = new Dispatcher();
				this.addEventListener(MouseEvent.ROLL_OVER, handleMouseIn);
				this.addEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
			}
			
			private function checkVisibility():void {
				toolbarVisible = (toolbarAllowed() && mousedOver);
			}

			public function closeToolbar(e:TimerEvent = null):void {
				mousedOver = false;
				checkVisibility();
				//parent.removeChild(this);
			}
			
			private function handleMouseIn(e:MouseEvent = null):void {
				_toolbarHideTimer.reset();
				mousedOver = true;
				checkVisibility();
			}

			private function handleMouseOut(e:MouseEvent = null):void {
				_toolbarHideTimer.reset();
				_toolbarHideTimer.start();
			}

			private function toolbarAllowed():Boolean {
				// Created to make possible to create rules to allow or not the toolbar
				return true;
			}

			public function sendSaveEvent():void{
				var saveEvent:ChatToolbarButtonEvent = new ChatToolbarButtonEvent(ChatToolbarButtonEvent.SAVE_CHAT_TOOLBAR_EVENT); 
				globalDispatcher.dispatchEvent(saveEvent);
			}

			public function sendCopyEvent():void{
				var copyEvent:ChatToolbarButtonEvent = new ChatToolbarButtonEvent(ChatToolbarButtonEvent.COPY_CHAT_TOOLBAR_EVENT);
				globalDispatcher.dispatchEvent(copyEvent);
			}

			public function registerListeners(component:UIComponent):void {
				component.addEventListener(MouseEvent.ROLL_OVER, handleMouseIn);
				component.addEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
			}
		]]>
	</mx:Script>

	<mx:Fade id="fadeOut" duration="200" alphaFrom="1.0" alphaTo="0.0" />
	<mx:Fade id="fadeIn" duration="200" alphaFrom="0.0" alphaTo="1.0" />

	<mx:Button id="saveBtn" 
			   styleName="saveButtonIconStyle"
			   width="22"
			   height="22"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.chat.saveBtn.toolTip')}" 
			   click="sendSaveEvent()"
			   tabIndex="{baseIndex+1}"
			   accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.copyBtn.accessibilityName')}"/>  
	
	<mx:Button id="copyBtn" 
			   styleName="copyButtonIconStyle"
			   width="22"
			   height="22"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.chat.copyBtn.toolTip')}" 
			   click="sendCopyEvent()"
			   tabIndex="{baseIndex+2}"
			   accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.copyBtn.accessibilityName')}"/>  
	
</mx:VBox>
