<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"
	creationComplete="onCreationComplete()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	verticalAlign="middle"
	horizontalAlign="center">
	
	<mate:Listener type="{UsersRollEvent.USER_ROLL_OVER}" method="onRollOver" />
	<mate:Listener type="{UsersRollEvent.USER_ROLL_OUT}" method="onRollOut" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	<mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="onChangeMyRole" />
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
		
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.Role;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.model.users.events.ChangeMyRole;
			import org.bigbluebutton.main.model.users.events.ChangeStatusEvent;
			import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
			import org.bigbluebutton.modules.users.events.UsersRollEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
  			private var rolledOver:Boolean = false;
  			private var moderator:Boolean = false;
  			
  			private function onCreationComplete():void {
  				refreshRole(UserManager.getInstance().getConference().amIModerator());
  				
  				/* I was trying to the binds through actionscript, but every time the itemrenderer was recycled 
  				 * the binds would stop functioning. I think it might have been because I was using strong 
  				 * binding and the bind was automatically garbage collected when data was set to null. You could 
  				 * use weak binding and then the binds shouldn't get garbage collected, but then you have to 
  				 * make sure to delete the bindings yourself or you'll have memory leaks.
  				 * 		Chad
  				 */
  				//BindingUtils.bindSetter(updateButton, data, "presenter");
  				//BindingUtils.bindSetter(updateButton, data, "raiseHand");
				
				/* I had to bind to an Image property which is in turn bound through MXML to the data properties. 
				 * This really needs to be changed, but it's the only way I could get it work.
				 * 		Chad
				 */
  				BindingUtils.bindSetter(updateButton, presenterInd, "includeInLayout");
  				BindingUtils.bindSetter(updateButton, moderatorInd, "includeInLayout");
  				BindingUtils.bindSetter(updateButton, statusInd, "includeInLayout");
  				
  				// The next two lines should be listening for the same data to change and be updating at the same 
  				// time, but the FlexEvent.DATA_CHANGE wasn't working consistently.
  				this.addEventListener(FlexEvent.DATA_CHANGE, dataChangeHandler);
  				ChangeWatcher.watch(this, "data", dataChangeHandler);
  				
  				if (data != null) // if data has already been set
  					updateButton(); //initialize state
  					
  				validateNow();
  			}
  			
  			private function dataChangeHandler(e:Event):void {
  				if (data != null) {
  					updateButton(); //reassess data state on change
				}
  			}
  			
			private function updateButton(unneeded:Object = null):void {
				if (data != null) {
					if (rolledOver) { //if i'm moderator and I rolled the mouse
						if (data.hasMood) {
							statusBtn.setStyle("icon", images.mood_clear);
							if (data.raiseHand) {
								statusBtn.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.lowerHand');
							} else {
								statusBtn.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.clearStatus');
							}

							statusImg.visible = false;
							statusBtn.visible = true;
							statusBtn.enabled = true;
						}
						if (!data.presenter) {
							roleBtn.setStyle("icon", images.presenter_new);
							roleBtn.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.changePresenter');

							roleImg.visible = false;
							roleBtn.visible = true;
							roleBtn.enabled = true;
						} else if (data.presenter) {  //this condition was added in order to remove the button from the interface as soon as the user is set to presenter, instead of waiting for rolledOut or mouse movement if already rolledOut, this affects only the moderator that is changing the status of a user to presenter
							roleImg.source = images.presenter_new;
							roleImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.presenter');

							roleImg.visible = true;
							roleBtn.visible = false;
							roleBtn.enabled = false;
						}
					} else {
						//updating which role to show: presenter or moderator
						if (data.presenter) {  //similar to the condition above, but updates the icon to everyone else
							roleImg.source = images.presenter_new;
							roleImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.presenter');
							roleBtn.visible = false;
							roleBtn.enabled = false;
						} else if(data.role == Role.MODERATOR) {
							roleImg.source = images.moderator;
							roleImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.moderator');
						} else {
							roleImg.source = null;
							roleImg.toolTip = "";
						}

						//updating which status	to show
						switch(data.mood) {
							case ChangeStatusEvent.RAISE_HAND:
								statusImg.source = images.mood_raise_hand;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.handRaised');
								break;

							case ChangeStatusEvent.AGREE:
								statusImg.source = images.mood_agreed;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.agree');
								break;

							case ChangeStatusEvent.DISAGREE:
								statusImg.source = images.mood_disagreed;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.disagree');
								break;

							case ChangeStatusEvent.SPEAK_LOUDER:
								statusImg.source = images.mood_speak_louder;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.speakLouder');
								break;

							case ChangeStatusEvent.SPEAK_LOWER:
								statusImg.source = images.mood_speak_softer;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.speakSofter');
								break;

							case ChangeStatusEvent.SPEAK_FASTER:
								statusImg.source = images.mood_speak_faster;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.speakFaster');
								break;

							case ChangeStatusEvent.SPEAK_SLOWER:
								statusImg.source = images.mood_speak_slower;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.speakSlower');
								break;

							case ChangeStatusEvent.BE_RIGHT_BACK:
								statusImg.source = images.mood_be_right_back;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.beRightBack');
								break;

							case ChangeStatusEvent.LAUGHTER:
								statusImg.source = images.mood_happy;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.laughter');
								break;

							case ChangeStatusEvent.SAD:
								statusImg.source = images.mood_sad;
								statusImg.toolTip = ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer.sad');
								break;

							default: //user has no status
								statusImg.source = null;
								statusImg.toolTip = "";
						}
						roleImg.visible = true;
						roleBtn.visible = false;
						roleBtn.enabled = false;
						statusImg.visible = true;
						statusBtn.visible = false;
						statusBtn.enabled = false;
					}
				}
			}
  			
  			private function onRollOver(e:UsersRollEvent):void{
				if (moderator && (e.userID == data.userID) && !data.phoneUser) {
					rolledOver = true;
					updateButton();
				}
			}
			
			private function onRollOut(e:UsersRollEvent):void{
				if (moderator && rolledOver) {
					rolledOver = false;
					updateButton();
				}
			}

			private function onChangeMyRole(e:ChangeMyRole):void {
				rolledOver = false;
				updateButton();
				
				refreshRole(e.role == Role.MODERATOR);
			}

			private function refreshRole(amIModerator:Boolean):void {
				moderator = amIModerator;
			}
  			
			private function roleBtnClicked():void {
				if (!data.presenter) {
					var e:RoleChangeEvent = new RoleChangeEvent(RoleChangeEvent.ASSIGN_PRESENTER);
					e.userid = data.userID;
					e.username = data.name;
					dispatchEvent(e);
				}
			}
			
			private function statusBtnClicked():void {
				if (data.hasMood) {
					dispatchEvent( new ChangeStatusEvent(data.userID, ChangeStatusEvent.CLEAR_STATUS) );
				}
			}
			
			// Need to refresh the roleBtn toolTip text on locale change
			private function localeChanged(e:Event):void {
				updateButton();
			}
		]]>
	</mx:Script>
	<mx:Image id="roleImg" visible="true" width="16" height="16" includeInLayout="{roleImg.visible}" />
	<mx:Button id="roleBtn" visible="false" enabled="false" width="20" height="20" click="roleBtnClicked()" includeInLayout="{roleBtn.visible}" />
	
	<mx:Image id="statusImg" visible="true" width="18" height="18" includeInLayout="{statusImg.visible}" />
	<mx:Button id="statusBtn" visible="false" enabled="false" width="18" height="18" click="statusBtnClicked()" includeInLayout="{statusBtn.visible}" />
	
	<!-- Helper objects because direct bindings to data break when the itemRenderer is recycled -->
	<mx:Image id="presenterInd" includeInLayout="false" visible="{data.presenter}" />
	<mx:Image id="moderatorInd" includeInLayout="false" visible="{data.role == Role.MODERATOR}" />
	<mx:Image id="statusInd" includeInLayout="false" visible="{data.hasMood}" />
</mx:HBox>
