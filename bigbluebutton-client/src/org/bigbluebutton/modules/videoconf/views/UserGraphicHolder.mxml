<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:mate="http://mate.asfusion.com/"
        xmlns:views="org.bigbluebutton.modules.videoconf.views.*"
        initialize="init()"
        creationComplete="onCreationComplete()"
        backgroundColor="white" width="320" height="240"
        mouseOver="onCanvasMouseOver()" mouseOut="onCanvasMouseOut()" >

    <mate:Listener type="{EventConstants.USER_TALKING}" method="handleUserTalkingEvent" />
    <mate:Listener type="{PresenterStatusEvent.PRESENTER_NAME_CHANGE}" method="handlePresenterChangedEvent" />
    <mate:Listener type="{BBBEvent.USER_VOICE_LEFT}" method="handleUserVoiceChangedEvent" />
    <mate:Listener type="{BBBEvent.USER_VOICE_MUTED}" method="handleUserVoiceChangedEvent" />
    <mate:Listener type="{StoppedViewingWebcamEvent.STOPPED_VIEWING_WEBCAM}" method="handleStoppedViewingWebcamEvent" />
    <mate:Listener type="{UserJoinedEvent.JOINED}" method="handleUserJoinedEvent" />

    <mx:Script>
        <![CDATA[
            import com.asfusion.mate.events.Dispatcher;

            import mx.core.UIComponent;

            import org.bigbluebutton.common.Images;
            import org.bigbluebutton.core.EventConstants;
            import org.bigbluebutton.core.UsersUtil;
            import org.bigbluebutton.core.events.CoreEvent;
            import org.bigbluebutton.core.events.VoiceConfEvent;
            import org.bigbluebutton.core.managers.UserManager;
            import org.bigbluebutton.core.model.VideoProfile;
            import org.bigbluebutton.core.vo.LockSettingsVO;
            import org.bigbluebutton.main.events.BBBEvent;
            import org.bigbluebutton.main.events.PresenterStatusEvent;
            import org.bigbluebutton.main.events.StoppedViewingWebcamEvent;
            import org.bigbluebutton.main.events.UserJoinedEvent;
            import org.bigbluebutton.main.model.users.BBBUser;
            import org.bigbluebutton.modules.videoconf.events.AddStaticComponent;
            import org.bigbluebutton.modules.videoconf.model.VideoConfOptions;
            import org.bigbluebutton.util.i18n.ResourceUtil;

            private var videoOptions:VideoConfOptions = new VideoConfOptions();
            
            [Bindable]
            private var _rolledOverMuteBtn:Boolean = false;
            [Bindable]
            private var _rolledOverCanvas:Boolean = false;
            [Bindable]
            private var _username:String = "";
            [Bindable]
            private var _me:Boolean = false;
            private var _dispatcher:Dispatcher = new Dispatcher();
            private var _images:Images = new Images();
            private var _user:BBBUser = null;
            private var _streamName:String = "";
            private var _userId:String = "";

            private var _hideMuteBtnTimer:Timer;

            private var _newParent:DisplayObjectContainer;
            private var _oldParent:DisplayObjectContainer = null;
            private var _oldW:Number = 100;
            private var _oldH:Number = 100;

            protected function init():void {
                _hideMuteBtnTimer = new Timer(500, 1);
                _hideMuteBtnTimer.addEventListener(TimerEvent.TIMER, onHideMuteBtnTimerComplete);
            }

            protected function onCreationComplete():void {
                _newParent = parent.parent.parent.parent;
                fullScreenIcon.source = _images.full_screen_white;
                closeIcon.source = _images.close_white;
            }

            private function handleUserJoinedEvent(event:UserJoinedEvent):void {
                // this is just to enforce the update of the BBBUser reference when the user reconnect
                if (user && event.userID == user.userID) {
                    userId = event.userID;
                    setUserProperties();
                }
            }

            public function set userId(value:String):void {
                _user = UsersUtil.getUser(value);
                _userId = value;
            }

            public function set streamName(value:String):void {
                _streamName = value;
            }

            public function get streamName():String {
                return _streamName;
            }

            public function get userId():String {
                return _userId;
            }

            public function loadAvatar(options:VideoConfOptions):void {
                avatar.user = _user;
                avatar.options = options;
                avatar.load(UsersUtil.getAvatarURL());

                avatarVisibility = true;
                setUserProperties();
            }

            public function loadCamera(options:VideoConfOptions, camIndex:int, videoProfile:VideoProfile):void {
                video.user = _user;
                video.options = options;
                _streamName = UserVideo.newStreamName(_user.userID, videoProfile);
                video.publish(camIndex, videoProfile, _streamName);

                videoVisibility = true;
                setUserProperties();
            }

            public function loadVideo(options:VideoConfOptions, connection:NetConnection, streamName:String):void {
                video.user = _user;
                video.options = options;
                video.view(connection, streamName);

                videoVisibility = true;
                setUserProperties();
            }

            private function setUserProperties():void {
                _username = user.name;
                _me = user.me;

                updateButtons();
                updateTalkingStatus();
            }

            public function get visibleComponent():UserGraphic {
                if (avatar.visible) {
                    return avatar;
                } else if (video.visible) {
                    return video;
                } else {
                    return null;
                }
            }

            public function get contentAspectRatio():Number {
                if (visibleComponent) {
                    return visibleComponent.aspectRatio;
                } else {
                    return 320 / 240;
                }
            }

            public function get user():BBBUser {
                return _user;
            }

            public function shutdown():void {
                if (isFullscreen()) onFullscreen();
                video.shutdown();
            }

            private function set avatarVisibility(value:Boolean):void {
                avatar.visible = avatar.includeInLayout = value;
                video.visible = video.includeInLayout = !value;
            }

            private function set videoVisibility(value:Boolean):void {
                avatarVisibility = !value;
            }

            private function hasPermissionToMute():Boolean {
                var me:BBBUser = UserManager.getInstance().getConference().getMyUser();
                
                return (!me.disableMyMic && (_me || UsersUtil.amIModerator()));
            }

            private function onMuteBtnClick(event:MouseEvent):void {
                if (user && user.voiceJoined && hasPermissionToMute()) {
                    var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);
                    e.userid = user.userID;
                    e.mute = !user.voiceMuted;
                    _dispatcher.dispatchEvent(e);
                }

                event.stopPropagation();
            }

            private function onMuteBtnMouseOver():void {
                if (hasPermissionToMute()) {
                    _rolledOverMuteBtn = true;
                }
                updateButtons();
            }

            private function onMuteBtnMouseOut():void {
                if (hasPermissionToMute()) {
                    _rolledOverMuteBtn = false;
                }
                updateButtons();
            }

            private function onCanvasMouseOver():void {
                _rolledOverCanvas = true;
                updateButtons();
            }

            private function onCanvasMouseOut():void {
                _rolledOverCanvas = false;
                updateButtons();
            }

            private function updateButtons():void {
                if (user != null) {
                    if (_rolledOverMuteBtn == user.voiceMuted) {
                        muteBtn.styleName = "muteOverlayBtn";
                    } else {
                        muteBtn.styleName = "unmuteOverlayBtn";
                    }

                    if (_rolledOverCanvas || _rolledOverMuteBtn) {
                        // muteBtnWrapper.visible = user.voiceJoined;
                        setMuteBtnVisibility(user.voiceJoined);
                    } else {
                        // muteBtnWrapper.visible = user.voiceJoined && user.voiceMuted;
                        setMuteBtnVisibility(user.voiceJoined && user.voiceMuted);
                    }

                    var userIconVisibility:Boolean;
                    if (user.presenter) {
                        userIcon.source = _images.presenter_white;
                        userIconVisibility = true;
                    } else {
                        if (user.role == BBBUser.MODERATOR) {
                            userIcon.source = _images.moderator_white;
                            userIconVisibility = true;
                        } else {
                            userIconVisibility = false;
                        }
                    }
                    userIconWrapper.visible = userIconWrapper.includeInLayout = userIconVisibility;
                }
            }

            private function updateTalkingStatus():void {
                if (user.talking) {
                    titleBox.setStyle("styleName", "videoToolbarBackgroundTalkingStyle");
                } else {
                    titleBox.setStyle("styleName", "videoToolbarBackgroundNotTalkingStyle");
                }
            }

            private function handleUserTalkingEvent(event:CoreEvent):void {
                if (user && event.message.userID ==  user.userID) {
                    updateButtons();
                    updateTalkingStatus();
                }
            }

            private function handlePresenterChangedEvent(event:PresenterStatusEvent):void {
                if (user && event.userID == user.userID) {
                    updateButtons();
                }
            }

            private function handleUserVoiceChangedEvent(event:BBBEvent):void {
                if (user && event.payload.userID == user.userID) {
                    updateButtons();
                    updateTalkingStatus();
                }
            }

            private function onHideMuteBtnTimerComplete(event:TimerEvent):void {
                muteBtnWrapper.visible = false;
            }

            private function setMuteBtnVisibility(visible:Boolean):void {
                if (visible) {
                    showMuteBtn();
                } else {
                    hideMuteBtn();
                }
            }

            private function hideMuteBtn():void {
                _hideMuteBtnTimer.reset();
                _hideMuteBtnTimer.start();
            }

            private function showMuteBtn():void {
                _hideMuteBtnTimer.reset();
                muteBtnWrapper.visible = true;
            }

            // Fullscreen video isn't a child of this module's wrapper so it must listen to it's close event
            private function handleStoppedViewingWebcamEvent(event:StoppedViewingWebcamEvent):void {
                if (user) {
                    if (user.userID == event.webcamUserID && video.streamName == event.streamName) {
                        handleCloseFullscreenStream();
                    }
                }
            }

            private function handleCloseFullscreenStream():void {
                if (isFullscreen()) {
                    shutdown();
                }
            }

            private function isFullscreen():Boolean {
                return _oldParent != null;
            }

            protected function onFullscreen(event:MouseEvent = null):void {
                if (isFullscreen()) {
                    fullScreenIcon.source = _images.full_screen_white;
                    var evt:AddStaticComponent = new AddStaticComponent(this);
                    _dispatcher.dispatchEvent(evt);

                    _oldParent = null;
                    this.visible = true;
                    this.includeInLayout = true;
                    this.width = _oldW;
                    this.height = _oldH;

                    for(var i2:uint = 0; i2 < _newParent.numChildren; i2++) {
                        if(_newParent.getChildAt(i2) != this) {
                            _newParent.getChildAt(i2).visible = true;
                            (_newParent.getChildAt(i2) as UIComponent).includeInLayout = true;
                        }
                    }
                } else {
                    fullScreenIcon.source = _images.full_screen_exit_white;
                    _oldParent = this.parent;
                    _oldW = this.width;
                    _oldH = this.height;

                    _newParent.addChildAt(this, 0);

                    this.percentHeight = 100;
                    this.percentWidth = 100;

                    for(var i1:uint = 0; i1< _newParent.numChildren; i1++) {
                        if(_newParent.getChildAt(i1) != this) {
                            _newParent.getChildAt(i1).visible = false;
                            (_newParent.getChildAt(i1) as UIComponent).includeInLayout = false;
                        }
                    }
                }

                if (event != null) {
                    event.stopImmediatePropagation();
                    event.stopPropagation();
                }
            }

        ]]>
    </mx:Script>

    <mx:Fade id="fadeOut" duration="200" alphaFrom="1.0" alphaTo="0.0" />
    <mx:Fade id="fadeIn" duration="200" alphaFrom="0.0" alphaTo="1.0" />

    <mx:Canvas id="canvas" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
        <views:UserAvatar id="avatar" width="100%" height="100%" visible="false" includeInLayout="false" />
        <views:UserVideo id="video" width="100%" height="100%" visible="false" includeInLayout="false" />
        <mx:VBox id="overlay" width="100%" height="100%" >
            <mx:HBox
                    id="titleBox"
                    width="100%"
                    verticalAlign="middle"
                    paddingRight="0"
                    paddingLeft="0"
                    styleName="videoToolbarBackgroundNotTalkingStyle" >
                <mx:Box id="userIconWrapper" visible="false" includeInLayout="false" paddingLeft="3" paddingRight="0" >
                    <mx:Image id="userIcon" />
                </mx:Box>
                <mx:Label
                        text="{_username + (_me? ' (' + ResourceUtil.getInstance().getString('bbb.users.usersGrid.nameItemRenderer.youIdentifier') + ')' : '')}"
                        fontWeight="{_me ? 'bold' : 'normal'}"
                        width="100%"
                        paddingLeft="0"
                        minWidth="0"
                        truncateToFit="true"
                        styleName="videoToolbarLabelStyle" />
                <mx:Box paddingRight="0">
                    <mx:Image id="fullScreenIcon" buttonMode="true" click="onFullscreen(event)" />
                </mx:Box>
                <mx:Box paddingRight="3">
                    <mx:Image id="closeIcon" buttonMode="true" click="shutdown()" />
                </mx:Box>
            </mx:HBox>
            <mx:Box
                    width="95%"
                    height="5%"
                    verticalAlign="bottom"
                    horizontalAlign="right" >
                <mx:Box
                        id="muteBtnWrapper"
                        visible="false"
                        hideEffect="{fadeOut}" showEffect="{fadeIn}" >
                    <mx:Button 
                            id="muteBtn"
                            styleName="talkingOverlayBtn"
                            buttonMode="true"
                            click="onMuteBtnClick(event)"
                            mouseOver="onMuteBtnMouseOver()"
                            mouseOut="onMuteBtnMouseOut()" />
                </mx:Box>
            </mx:Box>
        </mx:VBox>
    </mx:Canvas>
</mx:VBox>
